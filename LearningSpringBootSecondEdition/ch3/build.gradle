buildscript {

    id "com.gorylenko.gradle-git-properties" version "1.4.17" 

	ext {
		springBootVersion = '2.0.0.M5'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

jar {
	baseName = 'learning-spring-boot'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}


dependencies {
/**
 Auto update when code update
  - Disable cache settings for autoconfigured componenets 
  - When it detects a change in code, it restarts the application, holding onto third-party classes
  and simply throwing away and reloading custom classes. 
  - Activates an embedded LiveReload server that can trigger the browser to refresh the page automatically. 
  
  - When we make a change t our code and eitehr issue a Save or a Make Project, 
  DevTools will throw away the loader holding our custom code and launch a new application context. This makes for a relatively
  speedy restart. 
  
  The problem os this approache is more on DB side, as all stuff gonna be reload - data on embedded DB may be affected.  
  
*/
 	compile("org.springframework.boot:spring-boot-devtools") 
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.synchronoss.cloud:nio-multipart-parser')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile('org.projectlombok:lombok')
	compile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
		
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("io.projectreactor:reactor-test")
	// Add mongo support on tes tscope
	testCompile("de.flapdoodle.embed:de.flapdoodle.embed.mongo") 
	// Rx way
	testCompile("io.projectreactor:reactor-test") 

}
